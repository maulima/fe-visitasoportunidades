
import { NativeModules, Platform } from 'react-native';

const { RNSslPinning } = NativeModules;
var Q = require('q');

const parseData = (bodyString) => {
    let res

    try {
        res = JSON.parse(bodyString)
    } catch (e) {
        res = bodyString
    }

    return res
}

module.exports = {
    getCookies : RNSslPinning.getCookies,
    removeCookieByName: RNSslPinning.removeCookieByName,
    fetch: function (url, obj, callback) {
        const { OS } = Platform
        var deferred = Q.defer();
        RNSslPinning.fetch(url, obj, (err, res) => {
            if (err) {
                deferred.reject({
                    response: {
                        data: OS === 'ios' ? parseData(res.body ||Â res.bodyString) : parseData(res.bodyString),
                        request: {
                            headers: res.headers,
                            responseURL: url
                        },
                        status: res.status
                    }
                });
            } else {
                res.json = function() {
                    return Q.fcall(function () {
                        return parseData(res.bodyString);
                    });
                };
                res.text = function() {
                    return Q.fcall(function () {
                        return res.bodyString;
                    });
                };
                res.url = url;
                res.data = parseData(res.bodyString)
                deferred.resolve(res);
            }

            deferred.promise.nodeify(callback);
        });
        return deferred.promise;
    }
}
